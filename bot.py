import asyncio
from datetime import datetime, timedelta, time
import os

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    LinkPreviewOptions
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, ContextTypes, MessageHandler, filters, \
    CallbackQueryHandler

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, select, delete, insert

import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

TOKEN = os.environ.get("TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")

engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

scheduler = AsyncIOScheduler()

lessons = [
    {"title": "Lektion 1. –õ–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", "link": "https://t.me/c/2054418094/48?thread=43"},
    {"title": "Lektion 2. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π", "link": "https://t.me/c/2054418094/56?thread=52"},
    {"title": "Lektion 3. –ì–ª–∞–≥–æ–ª sein (–±—ã—Ç—å)", "link": "https://t.me/c/2054418094/64?thread=58"},
    {"title": "Lektion 4. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ sein. –õ–µ–∫—Å–∏–∫–∞: –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ", "link": "https://t.me/c/2054418094/129?thread=65"},
    {"title": "Lektion 5. –ü—Ä–∞–≤–∏–ª–∞ —á—Ç–µ–Ω–∏—è: sch, –≤–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π r, w, –Ω–µ–º–æ–π h", "link": "https://t.me/c/2054418094/71?thread=69"},
    {"title": "Lektion 6. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ sein, —Ä–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö, –ª–µ–∫—Å–∏–∫–∞", "link": "https://t.me/c/2054418094/75?thread=72"},
    {"title": "Lektion 7. Rr", "link": "https://t.me/c/2054418094/83?thread=77"},
    {"title": "Lektion 8. Teil 1. Das Auto ist neu: –ª–µ–∫—Å–∏–∫–∞", "link": "https://t.me/c/2054418094/93?thread=78"},
    {"title": "Lektion 8. Teil 2", "link": "https://t.me/c/2054418094/94?thread=79"},
    {"title": "Lektion 9. –ü—Ä–∞–≤–∏–ª–∞ —á—Ç–µ–Ω–∏—è: ei, ch, ck", "link": "https://t.me/c/2054418094/95?thread=84"},
    {"title": "Lektion 10. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª–∏", "link": "https://t.me/c/2054418094/96?thread=85"}
]

main_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("üìã –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
    # todo: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å, –¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å, –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?)
    [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")]
    # todo: –ø–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ (c –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –ª–µ–∫—Ü–∏—è –∞ –Ω–µ –ø—Ä–∞–∫—Ç–∏–∫—É–º, —Ç–æ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—â–∏–µ –ª–µ–∫—Ü–∏–∏ —É–¥–∞–ª—è—é—Ç—Å—è, –∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–µ–∏–º = —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ)
    # todo: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –Ω–∞ —á–µ—Ä–µ–∑ x –¥–Ω–µ–π –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É, —Ç–æ–≥–¥–∞ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–≤–æ–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏–º—ã–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è, –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
], resize_keyboard=True)

# todo: –≤–Ω–µ–¥—Ä–∏—Ç—å –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏–Ω–∏–≥–∏

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, unique=True)
    schedule = Column(String, default='08:00')


class Reminder(Base):
    __tablename__ = 'reminders'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    lesson_index = Column(Integer)
    remind_at = Column(DateTime)


def schedule_checker(application):
    # job_id = f"reminder_{user_id}"
    # scheduler.remove_job(job_id=job_id, jobstore=None) if scheduler.get_job(job_id) else None
    # scheduler.add_job(
    #     send_lesson,
    #     'interval',
    #     days=interval_days,
    #     start_date=datetime.now().replace(hour=hour, minute=minute, second=0) + timedelta(days=0),
    #     args=[chat_id, user_id, context],
    #     id=job_id,
    #     replace_existing=True
    # )
    #
    # initialise using all registered users and their schedules
    scheduler.add_job(check_reminders, "interval", days=1, args=[application])
    scheduler.start()


async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    async with async_session() as session:
        result = await session.execute(select(User).where(User.chat_id == chat_id))
        user = result.scalar_one_or_none()
        if not user:
            user = User(chat_id=chat_id)
            session.add(user)
            await session.commit()
            await session.refresh(user)

            reminder = Reminder(user_id=user.id, lesson_index=0, remind_at=datetime.now())
            session.add(reminder)
            await session.commit()

    await show_today_lessons(update, context)


async def show_today_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    async with async_session() as session:
        result = await session.execute(select(User).where(User.chat_id == chat_id))
        user = result.scalar_one_or_none()

        if not user:
            # todo: —Å–æ–∑–¥–∞—Ç—å user –∏ reminder
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        result = await session.execute(
            select(Reminder.lesson_index).where(
                Reminder.user_id == user.id,
                Reminder.remind_at <= datetime.now()
            )
        )
        logger.info(f"result: {result}")
        indices = sorted(set(row[0] for row in result.fetchall()))
        logger.info(f"indices: {indices}")

        if not indices:
            # todo: –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏, —Å–º sh show_planned_lessons()
            await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç.")
            return

        await update.message.reply_text("üìã –£—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        for idx in indices:
            if 0 <= idx < len(lessons):
                await show_lesson(update, idx)


async def show_lesson(update, lesson_id):
    lesson = lessons[lesson_id]
    msg = f"<a href='{lesson['link']}'>{lesson['title']}</a>"
    keyboard = build_keyboard(lesson_id)
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=keyboard,
                                    link_preview_options=LinkPreviewOptions(is_disabled=True))


async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    async with async_session() as session:
        result = await session.execute(select(User).where(User.chat_id == chat_id))
        user = result.scalar_one_or_none()

        if not user:
            # todo: —Å–æ–∑–¥–∞—Ç—å user –∏ reminder
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        await update.message.reply_text("–ü–æ–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: user.id={user.id}, chat_id:{user.chat_id}, schedule: {user.schedule}")
        for job in scheduler.get_jobs():
            await update.message.reply_text(
                f"job id:{job.id}, name:{job.name}, trigger:{job.trigger}, next run time:{job.next_run_time}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"update:{update}, context: {context}")

    text: String = update.message.text.lower()

    if "—É—Ä–æ–∫–∏" in text and "—Å–µ–≥–æ–¥–Ω—è" in text:
        await show_today_lessons(update, context)
    elif "—É—Ä–æ–∫–∏" in text and "–≤—Å–µ" in text:
        await show_all_lessons(update, context)
    elif "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in text:
        await show_schedule(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")


def build_keyboard(lesson_id):
    logger.info(f"build_keyboard(lesson_id={lesson_id})")
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–æ—à–µ–ª, –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_lesson_{lesson_id}"),
            InlineKeyboardButton("üîÅ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞...", callback_data=f"remind_1_{lesson_id}")
        ],
    ])


async def on_lesson_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"query.data={query.data})")

    await query.answer()

    if query.data.startswith("remind_1"):
        query_request_data = query.data.split("_")
        lesson_id = int(query_request_data[-1])
        logger.info(f"lesson_id={lesson_id})")
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ", callback_data=f"next_lesson_{lesson_id}"),
                InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"remind_2_1_{lesson_id}"),
                InlineKeyboardButton("2 –¥–Ω—è", callback_data=f"remind_2_2_{lesson_id}"),
                InlineKeyboardButton("3 –¥–Ω—è", callback_data=f"remind_2_3_{lesson_id}")
            ],
            # [
            #     InlineKeyboardButton("5 –¥–Ω–µ–π", callback_data=f"remind_2_5_{lesson_id}"),
            #     InlineKeyboardButton("–Ω–µ–¥–µ–ª—é", callback_data=f"remind_2_7_{lesson_id}"),
            # ],
            # [
            #     InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏", callback_data=f"remind_2_14_{lesson_id}"),
            #     InlineKeyboardButton("–º–µ—Å—è—Ü", callback_data=f"remind_2_30_{lesson_id}")
            # ]
        ])
        await query.edit_message_reply_markup(reply_markup=keyboard)

    elif query.data.startswith("remind_2"):
        query_request_data = query.data.split("_")
        days = int(query_request_data[-2])
        logger.info(f"days={days})")
        lesson_id = int(query_request_data[-1])
        logger.info(f"lesson_id={lesson_id})")
        await update_reminder_to_next_time(update, lesson_id, interval_days=days, context=context)

    elif query.data.startswith("next_lesson_"):
        query_request_data = query.data.split("_")
        lesson_id = int(query_request_data[-1])
        logger.info(f"lesson_id={lesson_id})")
        await update_reminder_to_next_lesson(update, lesson_id=lesson_id, context=context)

    elif query.data.startswith("new_reminder_today"):
        query_request_data = query.data.split("_")
        lesson_id = int(query_request_data[-1])
        logger.info(f"lesson_id={lesson_id})")
        await set_reminder_for_today(update, lesson_id, context)


async def update_reminder_to_next_lesson(update, lesson_id, context):
    logger.info(f"update_reminder_to_next_lesson(lesson_id={lesson_id})")
    chat_id = update.effective_chat.id
    async with (async_session() as session):
        result = await session.execute(
            select(Reminder)
            .join(User)
            .where(
                User.chat_id == chat_id,
                Reminder.lesson_index == lesson_id
            )
        )
        reminder = result.scalar_one_or_none()
        logger.info(f"result: {reminder}")
        if not reminder:
            # todo: —Å–æ–∑–¥–∞—Ç—å reminder
            await context.bot.send_message(chat_id=chat_id, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        next_index = reminder.lesson_index + 1
        if next_index < len(lessons):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
            reminder.lesson_index = next_index
            reminder.remind_at = datetime.combine(datetime.today().date(), time.min)
            await session.commit()
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –£—Ä–æ–∫ {reminder.lesson_index} –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ª–µ–¥—É—é—â–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
            await show_today_lessons(update, context)

        else:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await session.delete(reminder)
            await session.commit()
            await context.bot.send_message(chat_id=chat_id, text="üéâ –í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")

months_ru = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]

def format_date(datetime):
    return f"{datetime.day} {months_ru[datetime.month - 1]} {datetime.year}"

async def set_reminder_for_today(update, lesson_id, context):
    logger.info(f"set_reminder_for_today(lesson_id={lesson_id})")
    #todo: implement
    pass

async def update_reminder_to_next_time(update, lesson_id, interval_days, context):
    logger.info(f"update_reminder_to_next_lesson(lesson_id={lesson_id})")
    chat_id = update.effective_chat.id
    async with async_session() as session:
        result = await session.execute(
            select(Reminder)
            .join(User)
            .where(
                User.chat_id == chat_id,
                Reminder.lesson_index == lesson_id
            )
        )
        reminder = result.scalar_one_or_none()
        logger.info(f"result: {reminder}")
        if not reminder:
            # todo: —Å–æ–∑–¥–∞—Ç—å reminder
            await context.bot.send_message(chat_id=chat_id, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –º–µ–Ω—è–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        now = datetime.combine(datetime.today().date(), time.min)
        reminder.remind_at = now + timedelta(days=interval_days)
        await session.commit()
        lesson = lessons[reminder.lesson_index]
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üìÖ –•–æ—Ä–æ—à–æ! –ù–∞–ø–æ–º–Ω—é –æ–± —É—Ä–æ–∫–µ <a href='{lesson['link']}'>{lesson['title']}</a> {format_date(reminder.remind_at)}.",
            parse_mode=ParseMode.HTML
        )

async def send_lesson_by_user(user, reminder, context):
    lesson_id = reminder.lesson_index
    msg = f"üìò –ü—Ä–æ–π–¥–∏ —É—Ä–æ–∫(–∏):<br/>"
    if 0 <= lesson_id < len(lessons):
        lesson = lessons[lesson_id]
        msg += f"<a href='{lesson['link']}'>{lesson['title']}</a><br/>"
        keyboard = build_keyboard(lesson_id)
        await context.bot.send_message(chat_id=user.chat_id, text=msg, reply_markup=keyboard,
                                       link_preview_options=LinkPreviewOptions(is_disabled=True),
                                       parse_mode=ParseMode.HTML)


async def check_reminders(context: CallbackContext):
    now = datetime.now()
    async with async_session() as session:
        result = await session.execute(select(Reminder).join(User).where(Reminder.remind_at <= now))
        reminders = result.scalars().all()
        for reminder in reminders:
            user = await session.get(User, reminder.user_id)
            await send_lesson_by_user(user, reminder, context)
            await session.commit()


async def diag(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.name}! '
        f'chat.id:{update.effective_chat.id}, '
        f'chat.effective_name: {update.effective_chat.effective_name}!',
        reply_markup=main_keyboard)


async def show_all_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìö –í—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞:")
    for idx, lesson in enumerate(lessons):
        msg = f"<a href='{lesson['link']}'>{lesson['title']}</a>"
        # todo: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞"
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)

async def show_planned_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    async with async_session() as session:
        result = await session.execute(select(User).where(User.chat_id == chat_id))
        user = result.scalar_one_or_none()

        if not user:
            # todo: —Å–æ–∑–¥–∞—Ç—å user –∏ reminder
            await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")
            return

        result = await session.execute(
            select(Reminder).where(
                Reminder.user_id == user.id,
                Reminder.remind_at >= datetime.now()
            )
        )
        logger.info(f"result: {result}")
        # todo: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        reminders = result.scalars().all()
        logger.info(f"reminders: {reminders}")

        if not reminders:
            await update.message.reply_text("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç.")
            return

        await update.message.reply_text("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:")
        for reminder in reminders:
            if 0 <= reminder.lesson_index < len(lessons):
                lesson = lessons[reminder.lesson_index]
                msg = f"<a href='{lesson['link']}'>{lesson['title']}</a> –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {format_date(reminder.remind_at)}"
                keyboard = build_all_lessons_keyboard(reminder.lesson_index)
                await update.message.reply_text(msg, parse_mode=ParseMode.HTML, reply_markup=keyboard)

def build_all_lessons_keyboard(lesson_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"new_reminder_today_lesson_{lesson_id}"),
        ],
    ])


async def main():
    await init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("settings", show_schedule))
    app.add_handler(CommandHandler("help", diag))

    app.add_handler(CommandHandler("all", show_all_lessons))
    app.add_handler(CommandHandler("today", show_today_lessons))

    app.add_handler(CommandHandler("planned", show_planned_lessons))
    app.add_handler(CommandHandler("reminders", show_planned_lessons))
    app.add_handler(CommandHandler("future", show_planned_lessons))

    app.add_handler(CallbackQueryHandler(on_lesson_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    schedule_checker(app)

    # todo: remove main app menu
    await app.initialize()
    await app.start()

    await app.updater.start_polling()

    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())
